fill = ethnicity)) +
facet_wrap(~race) +
geom_bar(color = "black") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(color = "black",
size=10)) +
scale_x_discrete(labels = ethnicity.names)
cond_filt %>%
select(ethnicity, age, race, gender) %>%
filter(race %in% c("ASIAN", "BLACK", "HISPANIC", "MIDDLE EASTERN", "OTHER")) -> facet
ggplot(facet,
aes(x = ethnicity,
fill = race)) +
facet_wrap(~race) +
geom_bar(color = "black") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(color = "black",
size=10)) +
scale_x_discrete(labels = ethnicity.names)
ggbar <- function(filtered_condition_dataset){
for (race in unique(filtered_condition_dataset$race)){
ggplot(filtered_condition_dataset,
aes(x = ethnicity,
fill = ethnicity)) +
geom_bar(fill = "goldenrod", color = "black") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(color = "black",
size=10)) -> test
print(test)
}
}
ggbar(cond_filt)
library(dplyr)
library(lubridate)
library(YaleToolkit)
### R code to perform statistical analysis goes here.
#obtain state borders
states <- map_data("state")
state.abbr.name <- tibble("state.abbr" = state.abb, "state.fullname" = state.name)
head(state.abbr.name)
db.age %>%
rename(state.abbr = state) %>% #change column name to state.abbr to join with state.abbr.name
inner_join(state.abbr.name) -> db.full
###obtain obesity, cardiovascular related disease by TRUE or FALSE
db.full %>%
mutate(obesity_rel.disease =
if_else(name == 'Obesity' |
name == 'Diabetes (Type II)' |
name == 'Overweight' |
name == 'High Cholesterol' |
name == 'Hypertension (High blood pressure)',
"TRUE", "FALSE")) -> related_diseases.db
#values for each state with obesity related disease
related_diseases.db %>%
group_by(state.fullname, obesity_rel.disease) %>%
tally() %>%
spread(obesity_rel.disease, n) %>%
rename(non_obesity.disease = "FALSE", obesity.disease = "TRUE") -> obesity.rel.disease.by.state
obesity.rel.disease.by.state %>%
ungroup() %>% #undo grouping for tallying to rename region
rename(region = state.fullname) %>% # rename columns using function as newname = oldname
mutate(region = tolower(region)) %>% # make lowercase
left_join(states) -> obesity.count.with.state.data
head(obesity.count.with.state.data)
View(obesity.count.with.state.data)
View(obesity.rel.disease.by.state)
View(rel.disease.by.state)
### R code to perform statistical analysis goes here.
#obtain state borders
states <- map_data("state")
state.abbr.name <- tibble("state.abbr" = state.abb, "state.fullname" = state.name)
head(state.abbr.name)
db %>%
rename(state.abbr = state) %>% #change column name to state.abbr to join with state.abbr.name
inner_join(state.abbr.name) -> db.full
###obtain obesity, cardiovascular related disease by TRUE or FALSE
db.full %>%
mutate(rel.disease =
if_else(name == 'Anxiexty Disorder' |
name == 'Depression' |
name == 'Schizophrenia' |
name == 'Anorexia Nervosa' |
name == 'ADHD'|
name == 'Post Traumatic Stress Disorder (PTSD)',
"TRUE", "FALSE")) -> related_diseases.db
#values for each state with obesity related disease
related_diseases.db %>%
group_by(state.fullname, rel.disease) %>%
tally() %>%
spread(rel.disease, n) %>%
rename(non_rel.disease = "FALSE", rel.disease = "TRUE") -> rel.disease.by.state
rel.disease.by.state %>%
ungroup() %>% #undo grouping for tallying to rename region
rename(region = state.fullname) %>% # rename columns using function as newname = oldname
mutate(region = tolower(region)) %>% # make lowercase
left_join(states) -> rel.count.with.state.data
head(rel.count.with.state.data)
### R code to perform statistical analysis goes here.
#obtain state borders
states <- map_data("state")
state.abbr.name <- tibble("state.abbr" = state.abb, "state.fullname" = state.name)
head(state.abbr.name)
db %>%
rename(state.abbr = state) %>% #change column name to state.abbr to join with state.abbr.name
inner_join(state.abbr.name) -> db.full
###obtain obesity, cardiovascular related disease by TRUE or FALSE
db.full %>%
mutate(rel.disease =
if_else(name == 'Anxiexty Disorder' |
name == 'Depression' |
name == 'Schizophrenia' |
name == 'Anorexia Nervosa' |
name == 'ADHD'|
name == 'Post Traumatic Stress Disorder (PTSD)',
"TRUE", "FALSE")) -> related_diseases.db
#values for each state with obesity related disease
related_diseases.db %>%
group_by(state.fullname, rel.disease) %>%
tally() %>%
spread(rel.disease, n) %>%
rename(non_rel.disease = "FALSE", rel.disease = "TRUE") -> rel.disease.by.state
rel.disease.by.state %>%
ungroup() %>% #undo grouping for tallying to rename region
rename(region = state.fullname) %>% # rename columns using function as newname = oldname
mutate(region = tolower(region)) %>% # make lowercase
left_join(states) -> rel.count.with.state.data
head(rel.count.with.state.data)
View(rel.count.with.state.data)
View(rel.disease.by.state)
View(obesity.rel.disease.by.state)
library(shiny); runApp('shiny/DNAsimpleShiny/barplot_test.R')
library(tidyverse)
library(ggplot2)
library(purrr)
#library(readr)
# library(RPostgreSQL)
library(ggrepel)
library(RColorBrewer)
library(plotly)
library(cowplot) #formatting mutliple ggplot charts into grid, also for publication ready labeling
library(scales) #for calculating percent easier
library(ggthemes)
library(waffle)
#set users and cond to dat for UNIQUE donor composition
dat <- read_csv("users_cond.csv")
dat %>% orderBy(~name, .)
dat %>% arrange(name)
setwd("~/shiny/DNAsimpleshiny/")
read_csv("shinydata.csv") -> dat
setwd("~/shiny/DNAsimpleshiny/")
read_csv("shinydata.csv") -> dat
dat %>%
arrange(name) -> dat
View(dat)
write_csv("~/shiny/DNAsimpleshiny/shinydata.csv", dat)
setwd("~/shiny/DNAsimpleshiny/")
read_csv("shinydata.csv") -> dat
dat %>%
arrange(name) -> dat
write_csv(dat, "~/shiny/DNAsimpleshiny/shinydata.csv")
runApp('shiny/DNAsimpleShiny/shiny_newtemplate.R')
runApp('shiny/DNAsimpleShiny/shiny_newtemplate.R')
runApp('shiny/DNAsimpleShiny/shiny_newtemplate.R')
runApp('shiny/DNAsimpleShiny/shiny_newtemplate.R')
runApp('shiny/DNAsimpleShiny/shiny_newtemplate.R')
runApp('shiny/DNAsimpleShiny/shiny_newtemplate.R')
runApp('shiny/DNAsimpleShiny/shiny_newtemplate.R')
runApp('shiny/DNAsimpleShiny/shiny_newtemplate.R')
runApp('shiny/DNAsimpleShiny/shiny_newtemplate.R')
install.packages("shinydashboard")
runApp('shiny/DNAsimpleShiny/dnasimple_shinydash.R')
runApp('shiny/DNAsimpleShiny/multiplot_shiny.R')
runApp('shiny/DNAsimpleShiny/multiplot_shiny.R')
runApp('shiny/DNAsimpleShiny/multiplot_shiny.R')
dat %>%
mutate(race =
if_else(ethnicity == 'EAST_ASIAN' |
ethnicity == 'SOUTHEAST_ASIAN' |
ethnicity == 'SOUTH_ASIAN' |
ethnicity == 'MIXED_ASIAN_AND_WHITE' |
ethnicity == 'WEST_ASIAN',
'ASIAN',
if_else(ethnicity == 'WHITE_EUROPEAN',
'WHITE',
if_else(ethnicity == 'WHITE_NORTH_AFRICAN' |
ethnicity == 'JEWISH_SHEPHARDIC' |
ethnicity == 'JEWISH_MIZRAHI' |
ethnicity == 'ARABIC',
'MIDDLE\nEASTERN',
if_else(ethnicity == 'WHITE_HISPANIC'|
ethnicity == 'MIXED_HISPANIC_AND_WHITE'|
ethnicity == 'HISPANIC_OTHER'|
ethnicity == 'MIXED_BLACK_AND_HISPANIC' |
ethnicity == 'HISPANIC_CARIBBEAN',
'HISPANIC',
if_else(ethnicity == 'BLACK_AMERICAN' |
ethnicity == 'BLACK_AFRICAN'|
ethnicity == 'MIXED_BLACK_AND_WHITE'|
ethnicity == 'MIXED_BLACK_AND_HISPANIC' |
ethnicity == 'BLACK_CARIBBEAN',
'BLACK',
if_else(ethnicity == 'NATIVE_AMERICAN'|
ethnicity == 'JEWISH ASHKENAZI' |
ethnicity == 'AMERINDIAN' |
ethnicity == 'INUIT' |
ethnicity == 'MESTIZO' |
ethnicity == 'MIXED_OTHER',
'OTHER', 'OTHER'))))))) -> dat
View(dat)
dat %>%
mutate(race =
if_else(ethnicity == 'EAST_ASIAN' |
ethnicity == 'SOUTHEAST_ASIAN' |
ethnicity == 'SOUTH_ASIAN' |
ethnicity == 'MIXED_ASIAN_AND_WHITE' |
ethnicity == 'WEST_ASIAN',
'ASIAN',
if_else(ethnicity == 'WHITE_EUROPEAN',
'WHITE',
if_else(ethnicity == 'WHITE_NORTH_AFRICAN' |
ethnicity == 'JEWISH_SHEPHARDIC' |
ethnicity == 'JEWISH_MIZRAHI' |
ethnicity == 'ARABIC',
'MIDDLE\nEASTERN',
if_else(ethnicity == 'WHITE_HISPANIC'|
ethnicity == 'MIXED_HISPANIC_AND_WHITE'|
ethnicity == 'HISPANIC_OTHER'|
ethnicity == 'MIXED_BLACK_AND_HISPANIC' |
ethnicity == 'HISPANIC_CARIBBEAN',
'HISPANIC',
if_else(ethnicity == 'BLACK_AMERICAN' |
ethnicity == 'BLACK_AFRICAN'|
ethnicity == 'MIXED_BLACK_AND_WHITE'|
ethnicity == 'MIXED_BLACK_AND_HISPANIC' |
ethnicity == 'BLACK_CARIBBEAN',
'BLACK',
if_else(ethnicity == 'NATIVE_AMERICAN'|
ethnicity == 'JEWISH ASHKENAZI' |
ethnicity == 'AMERINDIAN' |
ethnicity == 'INUIT' |
ethnicity == 'MESTIZO' |
ethnicity == 'MIXED_OTHER',
'OTHER', 'OTHER'))))))) -> dat
View(dat)
dat %>%
mutate(race =
if_else(ethnicity == 'EAST_ASIAN' |
ethnicity == 'SOUTHEAST_ASIAN' |
ethnicity == 'SOUTH_ASIAN' |
ethnicity == 'MIXED_ASIAN_AND_WHITE' |
ethnicity == 'WEST_ASIAN',
'ASIAN',
if_else(ethnicity == 'WHITE_EUROPEAN',
'WHITE',
if_else(ethnicity == 'WHITE_NORTH_AFRICAN' |
ethnicity == 'JEWISH_SHEPHARDIC' |
ethnicity == 'JEWISH_MIZRAHI' |
ethnicity == 'ARABIC',
'MIDDLE\nEASTERN',
if_else(ethnicity == 'WHITE_HISPANIC'|
ethnicity == 'MIXED_HISPANIC_AND_WHITE'|
ethnicity == 'HISPANIC_OTHER'|
ethnicity == 'MIXED_BLACK_AND_HISPANIC' |
ethnicity == 'HISPANIC_CARIBBEAN',
'HISPANIC',
if_else(ethnicity == 'BLACK_AMERICAN' |
ethnicity == 'BLACK_AFRICAN'|
ethnicity == 'MIXED_BLACK_AND_WHITE'|
ethnicity == 'MIXED_BLACK_AND_HISPANIC' |
ethnicity == 'BLACK_CARIBBEAN',
'BLACK',
if_else(ethnicity == 'NATIVE_AMERICAN'|
ethnicity == 'JEWISH ASHKENAZI' |
ethnicity == 'AMERINDIAN' |
ethnicity == 'INUIT' |
ethnicity == 'MESTIZO' |
ethnicity == 'MIXED_OTHER',
'OTHER', 'OTHER'))))))) -> dat
read_csv("shinydata.csv") -> dat
#set working directory
setwd("~/DNAsimple/revised_db")
read_csv("shinydata.csv") -> dat
setwd("~/shiny/DNAsimpleshiny/")
read_csv("shinydata.csv") -> dat
setwd("~/shiny/DNAsimpleshiny/")
read_csv("shinydata.csv") -> dat
setwd("~/shiny/DNAsimpleshiny/")
read_csv("shinydata.csv") -> dat
dat %>%
arrange(name) -> dat
write_csv(dat, "~/shiny/DNAsimpleshiny/shinydata.csv")
dat %>%
mutate(race =
if_else(ethnicity == 'EAST_ASIAN' |
ethnicity == 'SOUTHEAST_ASIAN' |
ethnicity == 'SOUTH_ASIAN' |
ethnicity == 'MIXED_ASIAN_AND_WHITE' |
ethnicity == 'WEST_ASIAN',
'ASIAN',
if_else(ethnicity == 'WHITE_EUROPEAN',
'WHITE',
if_else(ethnicity == 'WHITE_NORTH_AFRICAN' |
ethnicity == 'JEWISH_SHEPHARDIC' |
ethnicity == 'JEWISH_MIZRAHI' |
ethnicity == 'ARABIC',
'MIDDLE\nEASTERN',
if_else(ethnicity == 'WHITE_HISPANIC'|
ethnicity == 'MIXED_HISPANIC_AND_WHITE'|
ethnicity == 'HISPANIC_OTHER'|
ethnicity == 'MIXED_BLACK_AND_HISPANIC' |
ethnicity == 'HISPANIC_CARIBBEAN',
'HISPANIC',
if_else(ethnicity == 'BLACK_AMERICAN' |
ethnicity == 'BLACK_AFRICAN'|
ethnicity == 'MIXED_BLACK_AND_WHITE'|
ethnicity == 'MIXED_BLACK_AND_HISPANIC' |
ethnicity == 'BLACK_CARIBBEAN',
'BLACK',
if_else(ethnicity == 'NATIVE_AMERICAN'|
ethnicity == 'JEWISH ASHKENAZI' |
ethnicity == 'AMERINDIAN' |
ethnicity == 'INUIT' |
ethnicity == 'MESTIZO' |
ethnicity == 'MIXED_OTHER',
'OTHER', 'OTHER'))))))) -> dat
setwd("~/shiny/DNAsimpleshiny/")
#read_csv("shinydata.csv") -> dat
dat %>%
arrange(name) -> dat
write_csv(dat, "~/shiny/DNAsimpleshiny/shinydata.csv")
View(dat)
View(dat)
runApp('shiny/DNAsimpleShiny/multiplot_shiny.R')
runApp('shiny/DNAsimpleShiny/multiplot_shiny.R')
library(shiny); runApp('shiny/DNAsimpleShiny/dnasimple_shinydash.R')
runApp('shiny/DNAsimpleShiny/multiplot_shiny.R')
runApp('shiny/How-to-start-2/code/01-two-inputs.R')
runApp('shiny/How-to-start-2/code/02-two-outputs.R')
runApp('shiny/How-to-start-2/code/03-reactive.R')
runApp('shiny/How-to-start-2/code/04-isolate.R')
runApp('shiny/How-to-start-2/code/05-actionButton.R')
runApp('shiny/How-to-start-2/code/07-eventReactive.R')
runApp('shiny/How-to-start-2/code/08-reactiveValues.R')
runApp('shiny/DNAsimpleShiny/tabbed.R')
runApp('shiny/DNAsimpleShiny/tabbed.R')
runApp('shiny/DNAsimpleShiny/tabbed.R')
runApp('shiny/DNAsimpleShiny/tabbed.R')
runApp('shiny/DNAsimpleShiny/tabbed.R')
runApp('shiny/DNAsimpleShiny/tabbed.R')
runApp('shiny/How-to-start-3/code/08-navbarPage.R')
runApp('shiny/DNAsimpleShiny/tabbed.R')
runApp('shiny/How-to-start-3/code/08-navbarPage.R')
runApp('shiny/How-to-start-3/code/08-navbarPage.R')
runApp('shiny/DNAsimpleShiny/tabbed.R')
runApp('shiny/DNAsimpleShiny/multiplot_shiny.R')
shiny::runApp('shiny/DNAsimpleShiny/DNAsimpleDash')
source('~/shiny/DNAsimpleShiny/DNAsimpleDash/functions.R', echo=TRUE)
source('~/shiny/DNAsimpleShiny/DNAsimpleDash/functions.R', echo=TRUE)
setwd("~/shiny/DNAsimpleShiny/DNAsimpleDash")
source('~/shiny/DNAsimpleShiny/DNAsimpleDash/functions.R', echo=TRUE)
library(tidyverse)
library(ggplot2)
library(purrr)
#library(readr)
# library(RPostgreSQL)
library(ggrepel)
library(RColorBrewer)
library(plotly)
library(cowplot) #formatting mutliple ggplot charts into grid, also for publication ready labeling
library(scales) #for calculating percent easier
library(ggthemes)
library(psych)
library(vcd)
library(rcompanion)
library(lazyeval)
psych_cond %>%
mutate(has_condition =
if_else(name == "ADHD",
"TRUE", "FALSE")) %>%
filter(has_condition == "FALSE") -> nonrelated_total
nonrelated_total
#nonrelated_total[!rev(duplicated(rev(nonrelated_total$user_id))),]
nonrelated_total %>% distinct(user_id, .keep_all =TRUE ) -> unique_non_cond
unique_non_cond
psych_cond %>% filter(name ==  "ADHD") -> adhd
adhd
bind_rows(unique_non_cond, adhd) -> CMHbinded
CMHbinded
CMHbinded %>% distinct(user_id, .keep_all =TRUE) -> uniquebinded
uniquebinded
uniquebinded %>% filter(has_condition == "FALSE")
uniquebinded %>% filter(has_condition == "TRUE")
psych_cond %>%
mutate(has_condition =
if_else(name == "ADHD",
"TRUE", "FALSE")) -> ADHD_var
# ADHD_var %>% filter(has_condition == "TRUE") %>% tally()
# ADHD_var %>% filter(has_condition == "TRUE") -> has_adhd
# # ADHD_var %>% filter(has_condition == "FALSE") %>% tally()
# ADHD_var %>% filter(has_condition == "FALSE") -> no_adhd
ADHD_var %>% distinct(user_id, .keep_all = TRUE) -> ADHDtestCMH
psych_cond %>%
mutate(has_condition =
if_else(name == "ADHD",
"TRUE", "FALSE")) -> ADHD_var
ADHD_var
# ADHD_var %>% filter(has_condition == "TRUE") %>% tally()
# ADHD_var %>% filter(has_condition == "TRUE") -> has_adhd
# # ADHD_var %>% filter(has_condition == "FALSE") %>% tally()
# ADHD_var %>% filter(has_condition == "FALSE") -> no_adhd
ADHD_var %>% distinct(user_id, .keep_all = TRUE) -> ADHDtestCMH
ADHD_var %>% filter(name == "TRUE") %>% tally()
View(psych_cond)
ADHD_var %>% filter(name == "FALSE") %>% tally()
ADHD_var %>% filter(has_condition == "FALSE") %>% tally()
ADHD_var %>% filter(has_condition == "TRUE") %>% tally()
ADHDtest %>% filter(has_condition == "FALSE") %>% tally()
ADHDtestCMH %>% filter(has_condition == "FALSE") %>% tally()
ADHDtestCMH %>% filter(has_condition == "TRUE") %>% tally()
ADHDtestCMH %>%
select(has_condition, name, gender, ethnicity,
diagnosed_by_physician, takes_medication, is_genetic_testing) %>%
group_by(has_condition,
gender,
diagnosed_by_physician,
takes_medication,
is_genetic_testing,
ethnicity) %>% tally()
ADHDtestCMH %>%
select(has_condition, name, race, gender, ethnicity,
diagnosed_by_physician, takes_medication, is_genetic_testing) %>%
group_by(gender,
diagnosed_by_physician,
has_condition,
race,
#is_genetic_testing,
takes_medication,
race) %>% tally() -> ADHDtest
ADHDtest
ADHDtest %>% filter(has_condition == "TRUE") %>% tally()
summary(ADHDtest)
#create table format
Table = xtabs(n ~ gender + has_condition + race, data = ADHDtest)
ftable(Table)
mantelhaen.test(Table)
#create table format
Table = xtabs(n ~ gender + diagnosed_by_physician + race, data = ADHDtest)
ftable(Table)
mantelhaen.test(Table)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#create table format
Table = xtabs(n ~ gender + diagnosed_by_physician + race, data = ADHDtest)
ftable(Table)
mantelhaen.test(Table)
NewTable = as.table(read.ftable(textConnection(Table)))
mantelhaen.test(Table)
ftable(Table)
runApp()
library(stats)
runApp()
#create table format
Table = xtabs(n ~ gender + diagnosed_by_physician + race, data = ADHDtest)
ftable(Table)
#mantelhaen.test(Table)
#create table format
Table = xtabs(n ~ gender + diagnosed_by_physician + race, data = ADHDtest)
ftable(Table)
#mantelhaen.test(Table)
#create table format
ADHDtestnew <-ADHDtest %>% filter(gender != "OTHER")
Table = xtabs(n ~ gender + diagnosed_by_physician + race, data = ADHDtestnew)
ftable(Table)
#mantelhaen.test(Table)
mantelhaen.test(Table)
runApp()
#create table format
ADHDtestnew <-ADHDtest %>% filter(gender != "OTHER")
ADHDtestnew$race[ADHDtestnew$race == "MIDDLE\nEASTERN"] <- "MIDDLE.E"
Table = xtabs(n ~ gender + diagnosed_by_physician + race, data = ADHDtestnew)
ftable(Table)
mantelhaen.test(Table)
#create table format
ADHDtestnew <-ADHDtest %>% filter(gender != "OTHER")
ADHDtestnew$race[ADHDtestnew$race == "MIDDLE\nEASTERN"] <- "MIDDLE.E"
Table = xtabs(n ~ gender + diagnosed_by_physician + race, data = ADHDtestnew)
ftable(Table)
mantelhaen.test(Table)
runApp()
runApp()
runApp()
runApp()
